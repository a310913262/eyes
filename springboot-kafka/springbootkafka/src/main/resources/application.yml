
server:
  port: 8081


# spring 集成kafka配置
spring:
  kafka:
    #    生产者
    producer:
      #  表示所有broker都确认接收成功
      acks: all
      retries: 0
      #      批处理大小
      batch-size: 16384
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      #      延迟发送时间
      linger: 5
      #  配置sasl安全机制
#      properties:
#        sasl.mechanism:  # PLAIN
#        security.protocol: #  SASL_PLAINTEXT
#        sasl.jaas.config: #  org.apache.kafka.common.security.plain.PlainLoginModule required username="xxxx" password="xxxx";
      bootstrap-servers: 192.168.64.100:9092,192.168.64.102:9092,192.168.64.103:9092
      topic: topic_test
    # 消费者
    consumer:
      #  表示kafka不持有当前offset时应当采用的策略
#      earliest
#      当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费
#      latest
#      当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据
#      none
#      topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      group-id: test
      bootstrap-servers: 192.168.64.100:9092,192.168.64.102:9092,192.168.64.103:9092
      topics: topic_test
      #  配置sasl安全机制
#      properties:
#        sasl.mechanism: # PLAIN
#        security.protocol: #  SASL_PLAINTEXT
#        sasl.jaas.config: #  org.apache.kafka.common.security.plain.PlainLoginModule required username="xxxx" password="xxxx";