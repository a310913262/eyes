
server:
  port: 8081


spring:
  kafka:
    producer:
      acks: all
      retries: 0
      batch-size: 16384
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      linger: 5
#      properties:
#        sasl.mechanism:  # PLAIN
#        security.protocol: #  SASL_PLAINTEXT
#        sasl.jaas.config: #  org.apache.kafka.common.security.plain.PlainLoginModule required username="xxxx" password="xxxx";
      bootstrap-servers: 192.168.64.100:9092,192.168.64.101:9092,192.168.64.102:9092
      topic: topic_test
    # ??????
    consumer:
#  earliest
#  当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费
#  latest
#  当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据
#  none
#  topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      group-id: test
      bootstrap-servers: 192.168.64.100:9092,192.168.64.101:9092,192.168.64.102:9092
      topics: topic_test
#      properties:
#        sasl.mechanism: # PLAIN
#        security.protocol: #  SASL_PLAINTEXT
#        sasl.jaas.config: #  org.apache.kafka.common.security.plain.PlainLoginModule required username="xxxx" password="xxxx";